{"version":3,"sources":["components/UI/Input/Input.jsx","components/UI/Input/Input.module.css","components/Order/CheckoutSummary/CheckoutSummary.module.css","views/Checkout/ContactData/ContactData.module.css","components/Order/CheckoutSummary/CheckoutSummary.js","views/Checkout/ContactData/ContactData.js","views/Checkout/Checkout.jsx"],"names":["input","props","inputClasses","classes","InputElement","inputElement","invalid","shouldValidate","touched","push","Invalid","validationError","className","ValidationError","errorMessage","elementType","join","elementConfig","value","onChange","changed","options","map","option","key","displayValue","Input","Label","label","module","exports","checkoutSummary","CheckoutSummary","style","width","margin","Burger","ingredients","Button","btnType","clicked","checkoutCancelled","console","log","checkoutContinued","connect","state","burgerBuilder","totalPrice","loading","order","token","auth","userId","purchaseBurgerStart","reseteIngredients","WithError","useState","name","type","placeholder","validation","required","valid","street","zipCode","minLength","maxLength","country","email","deliveryMethod","orderForm","setOrderForm","formIsValid","setFormIsValid","formElementsArray","id","config","form","onSubmit","event","preventDefault","formData","price","orderData","history","formElement","inputIdentifier","updatedOrderForm","updatedFormElement","target","rules","isValid","trim","length","checkValidity","inputChangedHandler","disabled","Spinner","ContactData","axios","purchased","summary","to","purchasedRedirect","goBack","replace","match","url","path","component"],"mappings":"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","file":"static/js/3.1827d542.chunk.js","sourcesContent":["import React from 'react';\n\nimport classes from './Input.module.css';\n\nconst input = ( props ) => {\n    let inputClasses = [classes.InputElement]\n    let inputElement = null;\n  \nif(props.invalid && props.shouldValidate && props.touched){\n    inputClasses.push(classes.Invalid)\n}\nlet validationError = null;\nif (props.invalid && props.touched) {\n    validationError = <p className={classes.ValidationError}>{props.errorMessage}</p>;\n}\n    switch ( props.elementType ) {\n        case ( 'input' ):\n            inputElement = <input\n                className={inputClasses.join(\" \")}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed}\n                 />;\n            break;\n        case ( 'textarea' ):\n            inputElement = <textarea\n                className={inputClasses.join(\" \")}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed} />;\n            break;\n        case ( 'select' ):\n            inputElement = (\n                <select\n                    className={inputClasses.join(\" \")}\n                    value={props.value}\n                    onChange={props.changed}>\n                    {props.elementConfig.options.map(option => (\n                        <option key={option.value} value={option.value}>\n                            {option.displayValue}\n                        </option>\n                    ))}\n                </select>\n            );\n            break;\n        default:\n            inputElement = <input\n                className={inputClasses.join(\" \")}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed} />;\n    }\n\n    return (\n        <div className={classes.Input}>\n            <label className={classes.Label}>{props.label}</label>\n            {inputElement}\n            {validationError}\n        </div>\n    );\n\n};\n\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__3r5Ke\",\"Label\":\"Input_Label__1qyHr\",\"InputElement\":\"Input_InputElement__2m88K\",\"Invalid\":\"Input_Invalid__16Mis\",\"ValidationError\":\"Input_ValidationError__qMR97\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary_CheckoutSummary__3PsXi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__Aqjhz\"};","import React from 'react';\n\nimport Burger from '../../Burger/Burger';\nimport Button from '../../UI/Button/Button';\nimport classes from './CheckoutSummary.module.css';\n\n\nconst checkoutSummary = (props) => {\n    return (\n        <div className={classes.CheckoutSummary}>\n            <h1>We hope it tastes well!</h1>\n            <div style={{width: '100%', margin: 'auto'}}>\n                <Burger ingredients={props.ingredients}\n                />\n            </div>\n            <Button \n                btnType=\"Danger\"\n                clicked={props.checkoutCancelled}\n                >CANCEL</Button>\n                {console.log(props.checkoutContinued)}\n            <Button \n                btnType=\"Success\"\n                clicked={props.checkoutContinued}\n                // clicked={alert(\"hello\")}\n                >CONTINUE</Button>\n        </div>\n    );\n}\n\nexport default checkoutSummary;","import React, { useState } from 'react';\nimport Input from '../../../components/UI/Input/Input'\nimport Button from '../../../components/UI/Button/Button';\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport classes from './ContactData.module.css';\nimport axios from '../../../axios-orders';\nimport WithError from '../../../HOC/WithErrorHandler'\nimport {connect} from 'react-redux'\nimport {purchaseBurgerStart} from '../../../store/actions/orderAction'\nimport {reseteIngredients} from '../../../store/actions/burgerBuilderAction'\n\nconst  ContactData =(props)=> {\n\nconst [orderForm, setOrderForm] = useState({\n    name: {\n        elementType: 'input',\n        elementConfig: {\n            type: 'text',\n            placeholder: 'Your Name'\n        },\n        value: '',\n        validation:{\n            required:true\n        },\n        valid:false,\n        touched: false\n    },\n    street: {\n        elementType: 'input',\n        elementConfig: {\n            type: 'text',\n            placeholder: 'Street'\n        },\n        value: '',\n        validation:{\n            required:true\n        },\n        valid:false\n        ,\n        touched: false\n    },\n    zipCode: {\n        elementType: 'input',\n        elementConfig: {\n            type: 'text',\n            placeholder: 'ZIP Code'\n        },\n        value: '',\n        validation:{\n            required:true,\n            minLength:5,\n            maxLength:5\n        },\n        valid:false,\n        touched: false\n    },\n    country: {\n        elementType: 'input',\n        elementConfig: {\n            type: 'text',\n            placeholder: 'Country'\n        },\n        value: '',\n        validation:{\n            required:true\n        },\n        valid:false,\n        touched: false\n    },\n    email: {\n        elementType: 'input',\n        elementConfig: {\n            type: 'email',\n            placeholder: 'Your E-Mail'\n        },\n        value: '',\n        validation:{\n            required:true\n        },\n        valid:false,\n        touched: false\n    },\n    deliveryMethod: {\n        elementType: 'select',\n        elementConfig: {\n            options: [\n                {value: 'fastest', displayValue: 'Fastest'},\n                {value: 'cheapest', displayValue: 'Cheapest'}\n            ]\n        },\n        value: 'cheapest',\n        valid: true,\n        validation:{}\n    }\n},)\n\nconst [formIsValid, setFormIsValid] = useState(false)\n\n\n    const checkValidity = (value, rules)=>{\n            let isValid = true;\n            if(!rules){\n                return true\n            }\n            if(rules.required){\n                isValid = value.trim() !== \"\" && isValid\n            }\n            if (rules.minLength){\n                isValid = (value.length >= rules.minLength) && isValid\n            }\n            if (rules.maxLength){\n                isValid = (value.length <= rules.maxLength) && isValid\n            }\n         \n            return isValid\n    }\n    const inputChangedHandler = (event, inputIdentifier) => {\n        const updatedOrderForm = {\n            ...orderForm\n        };\n        const updatedFormElement = { \n            ...updatedOrderForm[inputIdentifier]\n        };\n        updatedFormElement.value = event.target.value;\n        updatedFormElement.valid=checkValidity(updatedFormElement.value, updatedFormElement.validation)\n        console.log(updatedFormElement.valid)\n        updatedFormElement.touched = true;\n        updatedOrderForm[inputIdentifier] = updatedFormElement;\n\n        let formIsValid = true;\n        for (let inputIdentifier in updatedOrderForm) {\n            formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\n        }\n        setOrderForm(updatedOrderForm)\n        setFormIsValid(formIsValid)\n     \n    }\n\n    const orderHandler = ( event ) => {\n        event.preventDefault();\n        \n        let formData = {}\n        for (let key in orderForm){\n            formData[key]=orderForm[key].value\n        }\n        const order = {\n            ingredients: props.ingredients,\n            price: props.totalPrice,\n            orderData: formData,\n            userId: props.userId\n        }\n        if(order.ingredients){\n            props.purchaseBurgerStart(order, props.token)\n        }\n       props.reseteIngredients()\n            props.history.push('/');\n\n    }\n\n\n        const formElementsArray = [];\n        for (let key in orderForm) {\n            formElementsArray.push({\n                id: key,\n                config: orderForm[key]\n            });\n        }\n        \n        let form = (\n            <form onSubmit={orderHandler}>\n                {formElementsArray.map(formElement => (\n                    <Input \n                    invalid={!formElement.config.valid}\n                        key={formElement.id}\n                        name={formElement.id}\n                        elementType={formElement.config.elementType}\n                        elementConfig={formElement.config.elementConfig}\n                        value={formElement.config.value}\n                        shouldValidate ={formElement.config.validation}\n                        touched= {formElement.config.touched}\n                        changed={(event) => inputChangedHandler(event, formElement.id)}\n                         />\n                ))}\n                <Button disabled={!formIsValid} btnType=\"Success\">ORDER</Button>\n            </form>\n        );\n        if ( props.loading ) {\n            form = <Spinner />;\n        }\n        return (\n            <div className={classes.ContactData}>\n                <h4>Enter your Contact Data</h4>\n                {form}\n            </div>\n        );\n    \n}\nconst mapStateToProps = (state) =>({\n    ingredients:state.burgerBuilder.ingredients,\n    totalPrice:state.burgerBuilder.totalPrice,\n    loading:state.order.loading,\n    token: state.auth.token,\n    userId:state.auth.userId\n  \n  })\nexport default connect(mapStateToProps,{purchaseBurgerStart,reseteIngredients})(WithError(ContactData,axios));","import React from \"react\";\nimport CheckoutSummary from \"../../components/Order/CheckoutSummary/CheckoutSummary\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport ContactData from \"../Checkout/ContactData/ContactData\";\nimport { connect } from \"react-redux\";\n\n\nconst Checkout =(props)=>{\n\n\n  const checkoutCancelHandler = () => {\n    props.history.goBack();\n  };\n  const checkoutContinueHandler = () => {\n    props.history.replace(`${props.match.url}/contact-data`);\n  };\n\n\n\n    let summary = <Redirect to=\"/\" />\n        if ( props.ingredients) {\n            const purchasedRedirect = props.purchased ? <Redirect to=\"/\"/> : null;\n            summary = (\n                <div>\n                    {purchasedRedirect}\n                    <CheckoutSummary\n                        ingredients={props.ingredients}\n                        checkoutCancelled={checkoutCancelHandler}\n                        checkoutContinued={checkoutContinueHandler} />\n                    <Route\n                        path={props.match.path + '/contact-data'}\n                        component={ContactData} />\n                </div>\n            );\n        }\n        return summary;\n}\n\nconst mapStateToProps = (state) => ({\n  ingredients: state.burgerBuilder.ingredients,\n  purchased:state.order.purchased\n});\n\nexport default connect(mapStateToProps, null)(Checkout);\n"],"sourceRoot":""}