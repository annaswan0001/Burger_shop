{"version":3,"sources":["components/Order/Order.module.css","components/Order/Order.jsx","views/Orders/Orders.js"],"names":["module","exports","order","props","ingredients","ingredientName","push","name","amount","ingredientOutput","map","ig","style","textTransform","display","margin","border","padding","key","className","classes","Order","Number","parseFloat","price","toFixed","connect","state","orders","loading","token","auth","userId","dispatch","onFetchOrders","fetchOrders","onAuthCheckState","authCheckStateOrder","withErrorHandler","useEffect","Spinner","id","axios"],"mappings":"+FACAA,EAAOC,QAAU,CAAC,MAAQ,uB,8ECmCXC,EAhCD,SAAEC,GACZ,IAAMC,EAAc,GAEpB,IAAM,IAAIC,KAAkBF,EAAMC,YAC9BA,EAAYE,KACR,CACIC,KAAMF,EACNG,OAAQL,EAAMC,YAAYC,KAKtC,IAAMI,EAAmBL,EAAYM,KAAI,SAAAC,GACrC,OAAO,0BACHC,MAAO,CACHC,cAAe,aACfC,QAAS,eACTC,OAAQ,QACRC,OAAQ,iBACRC,QAAS,OAEbC,IAAKP,EAAGJ,MAAOI,EAAGJ,KARf,KAQuBI,EAAGH,OAR1B,QAWX,OACI,yBAAKW,UAAWC,IAAQC,OACpB,2CAAiBZ,GACjB,qCAAU,uCAAaa,OAAOC,WAAYpB,EAAMqB,OAAQC,QAAS,O,gDCmB9DC,uBAfS,SAAAC,GACpB,MAAO,CACHC,OAAQD,EAAMzB,MAAMA,MACpB2B,QAASF,EAAMzB,MAAM2B,QACrBC,MAAMH,EAAMI,KAAKD,MACjBE,OAAOL,EAAMI,KAAKC,WAIC,SAAAC,GACvB,MAAO,CACHC,cAAe,SAACJ,EAAOE,GAAR,OAAmBC,EAASE,YAAYL,EAAOE,KAC9DI,iBAAiB,kBAAIH,EAASI,mBAGvBX,CAA6CY,aAvC7C,SAACnC,GAEZoC,qBAAU,WACNpC,EAAMiC,qBACP,CAACjC,EAAMiC,mBAGN,IAAIR,EAAS,kBAACY,EAAA,EAAD,MASb,OARMrC,EAAM0B,UACRD,EAASzB,EAAMyB,OAAOlB,KAAK,SAAAR,GAAK,OAC5B,kBAACmB,EAAD,CACIH,IAAKhB,EAAMuC,GACXrC,YAAaF,EAAME,YACnBoB,MAAOtB,EAAMsB,YAIrB,6BACKI,KAqBoEc","file":"static/js/5.84154899.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Order\":\"Order_Order__3kYZJ\"};","import React from 'react';\n\nimport classes from './Order.module.css';\n\nconst order = ( props ) => {\n    const ingredients = [];\n\n    for ( let ingredientName in props.ingredients ) {\n        ingredients.push(\n            {\n                name: ingredientName,\n                amount: props.ingredients[ingredientName]\n            }\n        );\n    }\n\n    const ingredientOutput = ingredients.map(ig => {\n        return <span \n            style={{\n                textTransform: 'capitalize',\n                display: 'inline-block',\n                margin: '0 8px',\n                border: '1px solid #ccc',\n                padding: '5px'\n                }}\n            key={ig.name}>{ig.name} ({ig.amount})</span>;\n    });\n\n    return (\n        <div className={classes.Order}>\n            <p>Ingredients: {ingredientOutput}</p>\n            <p>Price: <strong>USD {Number.parseFloat( props.price ).toFixed( 2 )}</strong></p>\n        </div>\n    );\n};\n\nexport default order;","import React, { useState, useEffect } from 'react';\n\nimport Order from '../../components/Order/Order';\nimport axios from '../../axios-orders';\nimport withErrorHandler from '../../HOC/WithErrorHandler';\nimport {connect} from 'react-redux'\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport {fetchOrders} from '../../store/actions/orderAction'\nimport {authCheckStateOrder} from '../../store/actions/authAction'\n\n\nconst Orders = (props)=> {\n\n    useEffect(() => {\n        props.onAuthCheckState()\n    }, [props.onAuthCheckState])\n  \n\n        let orders = <Spinner />;\n        if ( !props.loading ) {\n            orders = props.orders.map( order => (\n                <Order\n                    key={order.id}\n                    ingredients={order.ingredients}\n                    price={order.price} />\n            ) )\n        }\n        return (\n            <div>\n                {orders}\n            </div>\n        );\n\n}\n\nconst mapStateToProps = state => {\n    return {\n        orders: state.order.order,\n        loading: state.order.loading,\n        token:state.auth.token,\n        userId:state.auth.userId,\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onFetchOrders: (token, userId) => dispatch(fetchOrders(token, userId) ),\n        onAuthCheckState:()=>dispatch(authCheckStateOrder())\n    };\n};\nexport default connect(mapStateToProps,mapDispatchToProps )(withErrorHandler(Orders, axios));"],"sourceRoot":""}