{"version":3,"sources":["components/UI/Input/Input.jsx","components/UI/Input/Input.module.css","views/Auth/Auth.module.css","views/Auth/Auth.jsx"],"names":["input","props","inputClasses","classes","InputElement","inputElement","invalid","shouldValidate","touched","push","Invalid","validationError","className","ValidationError","errorMessage","elementType","join","elementConfig","value","onChange","changed","options","map","option","key","displayValue","Input","Label","label","module","exports","connect","state","loading","auth","error","token","buildingBuilder","burgerBuilder","building","redirectPath","dispatch","onAuth","email","password","isSignUp","settingAuthRedirectPath","path","setAuthRedirectPath","useState","type","placeholder","validation","required","isEmail","valid","minLength","controls","setControls","setisSignUp","useEffect","checkValidity","rules","isValid","trim","length","maxLength","test","isNumeric","authRedirect","to","formElementsArray","id","config","form","formElement","event","controlName","updatedControls","target","inputChangedHandler","message","split","Auth","onSubmit","preventDefault","btnType","clicked"],"mappings":"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","file":"static/js/4.9c113274.chunk.js","sourcesContent":["import React from 'react';\n\nimport classes from './Input.module.css';\n\nconst input = ( props ) => {\n    let inputClasses = [classes.InputElement]\n    let inputElement = null;\n  \nif(props.invalid && props.shouldValidate && props.touched){\n    inputClasses.push(classes.Invalid)\n}\nlet validationError = null;\nif (props.invalid && props.touched) {\n    validationError = <p className={classes.ValidationError}>{props.errorMessage}</p>;\n}\n    switch ( props.elementType ) {\n        case ( 'input' ):\n            inputElement = <input\n                className={inputClasses.join(\" \")}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed}\n                 />;\n            break;\n        case ( 'textarea' ):\n            inputElement = <textarea\n                className={inputClasses.join(\" \")}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed} />;\n            break;\n        case ( 'select' ):\n            inputElement = (\n                <select\n                    className={inputClasses.join(\" \")}\n                    value={props.value}\n                    onChange={props.changed}>\n                    {props.elementConfig.options.map(option => (\n                        <option key={option.value} value={option.value}>\n                            {option.displayValue}\n                        </option>\n                    ))}\n                </select>\n            );\n            break;\n        default:\n            inputElement = <input\n                className={inputClasses.join(\" \")}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed} />;\n    }\n\n    return (\n        <div className={classes.Input}>\n            <label className={classes.Label}>{props.label}</label>\n            {inputElement}\n            {validationError}\n        </div>\n    );\n\n};\n\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__3r5Ke\",\"Label\":\"Input_Label__1qyHr\",\"InputElement\":\"Input_InputElement__2m88K\",\"Invalid\":\"Input_Invalid__16Mis\",\"ValidationError\":\"Input_ValidationError__qMR97\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__3_zpm\"};","import React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport Input from \"../../components/UI/Input/Input\";\nimport Button from \"../../components/UI/Button/Button\";\nimport classes from \"./Auth.module.css\";\nimport { auth, setAuthRedirectPath } from \"../../store/actions/authAction\";\nimport Spinner from \"../../components/UI/Spinner/Spinner\";\nimport { Redirect } from \"react-router-dom\";\n\nconst  Auth = (props)=> {\n\n  const [controls, setControls] = useState({\n    email: {\n      elementType: \"input\",\n      elementConfig: {\n        type: \"text\",\n        placeholder: \"Mail Address\",\n      },\n      value: \"\",\n      validation: {\n        required: true,\n        isEmail: true,\n      },\n      valid: false,\n      touched: false,\n    },\n    password: {\n      elementType: \"input\",\n      elementConfig: {\n        type: \"password\",\n        placeholder: \"Password\",\n      },\n      value: \"\",\n      validation: {\n        required: true,\n        minLength: 6,\n      },\n      valid: false,\n      touched: false,\n    },\n  })\n\n  const [isSignUp, setisSignUp] = useState(true)\n \n  useEffect(() => {\n    if(!props.buildingBuilder && props.redirectPath!==\"/\"){\n      setAuthRedirectPath(\"/\")\n    }\n  }, [props.buildingBuilder,props.redirectPath,setAuthRedirectPath])\n\n\n\n  const checkValidity=(value, rules)=> {\n    let isValid = true;\n    if (!rules) {\n      return true;\n    }\n\n    if (rules.required) {\n      isValid = value.trim() !== \"\" && isValid;\n    }\n\n    if (rules.minLength) {\n      isValid = value.length >= rules.minLength && isValid;\n    }\n\n    if (rules.maxLength) {\n      isValid = value.length <= rules.maxLength && isValid;\n    }\n\n    if (rules.isEmail) {\n      const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n      isValid = pattern.test(value) && isValid;\n    }\n\n    if (rules.isNumeric) {\n      const pattern = /^\\d+$/;\n      isValid = pattern.test(value) && isValid;\n    }\n\n    return isValid;\n  }\n\n  const inputChangedHandler = (event, controlName) => {\n    const updatedControls = {\n      ...controls,\n      [controlName]: {\n        ...controls[controlName],\n        value: event.target.value,\n        valid: checkValidity(\n          event.target.value,\n          controls[controlName].validation\n        ),\n        touched: true,\n      },\n    };\n    setControls(updatedControls)\n\n  };\n\n  const submitHandler = (event) => {\n    event.preventDefault();\n    props.onAuth(\n      controls.email.value,\n      controls.password.value,\n      isSignUp\n    );\n  };\n  \n  const switchModeHandler = () => {\n    setisSignUp(!isSignUp);\n    \n  };\n\n    let authRedirect = null;\n    if (props.token) {\n      authRedirect = <Redirect to={props.redirectPath}/>;\n    }\n\n    const formElementsArray = [];\n    for (let key in controls) {\n      formElementsArray.push({\n        id: key,\n        config: controls[key],\n      });\n    }\n\n    let form = formElementsArray.map((formElement) => (\n      <Input\n        key={formElement.id}\n        elementType={formElement.config.elementType}\n        elementConfig={formElement.config.elementConfig}\n        value={formElement.config.value}\n        invalid={!formElement.config.valid}\n        shouldValidate={formElement.config.validation}\n        touched={formElement.config.touched}\n        changed={(event) => inputChangedHandler(event, formElement.id)}\n      />\n    ));\n    if (props.loading) {\n      form = <Spinner />;\n    }\n\n    let errorMessage = null;\n    if (props.error) {\n      errorMessage = <p>{props.error.message.split(\"_\").join(\" \")}</p>;\n    }\n    return (\n      <div className={classes.Auth}>\n        {authRedirect}\n        {errorMessage}\n\n        <form onSubmit={submitHandler}>\n          {form}\n          <Button btnType=\"Success\">SUBMIT</Button>\n        </form>\n        <Button clicked={switchModeHandler} btnType=\"Danger\">\n          SWITCH TO {isSignUp ? \"SIGN IN\" : \"SIGN UP\"}\n        </Button>\n      </div>\n    );\n  \n}\nconst mapStateToProps = (state) => ({\n  loading: state.auth.loading,\n  error: state.auth.error,\n  token: state.auth.token !== null,\n  buildingBuilder: state.burgerBuilder.building,\n  redirectPath:state.auth.redirectPath\n\n});\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onAuth: (email, password, isSignUp) =>dispatch(auth(email, password, isSignUp)),\n    settingAuthRedirectPath:(path)=>dispatch(setAuthRedirectPath(path))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);\n"],"sourceRoot":""}